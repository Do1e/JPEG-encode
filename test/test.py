# %%
from encoder_utils import Byte_Buffer
b = Byte_Buffer()
b.append_byte(18)
b.append_byte(34)
b.append_bit(0)
b.append_bit(1)
b.append_bit(0)
b.append_byte(0xf9)
b.append_bit(0)
b.append_bit(1)
b.append_bit(1)
b.append_bit(1)
b.append_bit(0)
b.append_str('0100111100101111')
print(b)
fp = open('test.bin', 'wb')
b.flush(fp)
fp.close()
# %%
from encoder_utils import tobin
for i in range(-31, 32):
	if i == 0:
		continue
	print(i, tobin(i))

# %%
from encoder_utils import Sym_Code
print(Sym_Code(10, 255, 8))

# %%
from encoder_utils import Byte_Buffer
b = Byte_Buffer()
c = Byte_Buffer()
c.append_str('0000000011')
b.append_buffer(c)
print(b)
# %%
from encoder_utils import RLE
import numpy as np
a = np.array([57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 895, 0, 0, 0, 9])
print(a.shape)
print(RLE(a))

# %%
import cv2
img = cv2.imread('./tstimg.bmp')
cv2.imwrite('test.bmp', img[408:, 1264:])
# %%
from encoder_utils import block2zz
import numpy as np
block2zz(np.array([[0,1,5,6,14,15,27,28],
				   [2,4,7,13,16,26,29,42],
				   [3,8,12,17,25,30,41,43],
				   [9,11,18,24,31,40,44,53],
				   [10,19,23,32,39,45,52,54],
				   [20,22,33,38,46,51,55,60],
				   [21,34,37,47,50,56,59,61],
				   [35,36,48,49,57,58,62,63]]))
# %%
from PIL import Image
img = Image.open('test.bmp')
img.save('./test/ref.jpg', quality=100, subsampling=0)
# %%
p = [47, 12]
if p.find(47) != -1:
	print('found')
# %%
p = [47, 12]
print([hex(item) for item in p])
# %%
import numpy as np

dict_AC0 = {'1010'            :    0x00, '00'              :    0x01, '01'              :    0x02, '100'             :    0x03, '1011'            :    0x04, '11010'           :    0x05, '1111000'         :    0x06, '11111000'        :    0x07, '1111110110'      :    0x08, '1111111110000010':    0x09, '1111111110000011':    0x0a, '1100'            :    0x11, '11011'           :    0x12, '1111001'         :    0x13, '111110110'       :    0x14, '11111110110'     :    0x15, '1111111110000100':    0x16, '1111111110000101':    0x17, '1111111110000110':    0x18, '1111111110000111':    0x19, '1111111110001000':    0x1a, '11100'           :    0x21, '11111001'        :    0x22, '1111110111'      :    0x23, '111111110100'    :    0x24, '1111111110001001':    0x25, '1111111110001010':    0x26, '1111111110001011':    0x27, '1111111110001100':    0x28, '1111111110001101':    0x29, '1111111110001110':    0x2a, '111010'          :    0x31, '111110111'       :    0x32, '111111110101'    :    0x33, '1111111110001111':    0x34, '1111111110010000':    0x35, '1111111110010001':    0x36, '1111111110010010':    0x37, '1111111110010011':    0x38, '1111111110010100':    0x39, '1111111110010101':    0x3a, '111011'          :    0x41, '1111111000'      :    0x42, '1111111110010110':    0x43, '1111111110010111':    0x44, '1111111110011000':    0x45, '1111111110011001':    0x46, '1111111110011010':    0x47, '1111111110011011':    0x48, '1111111110011100':    0x49, '1111111110011101':    0x4a, '1111010'         :    0x51, '11111110111'     :    0x52, '1111111110011110':    0x53, '1111111110011111':    0x54, '1111111110100000':    0x55, '1111111110100001':    0x56, '1111111110100010':    0x57, '1111111110100011':    0x58, '1111111110100100':    0x59, '1111111110100101':    0x5a, '1111011'         :    0x61, '111111110110'    :    0x62, '1111111110100110':    0x63, '1111111110100111':    0x64, '1111111110101000':    0x65, '1111111110101001':    0x66, '1111111110101010':    0x67, '1111111110101011':    0x68, '1111111110101100':    0x69, '1111111110101101':    0x6a, '11111010'        :    0x71, '111111110111'    :    0x72, '1111111110101110':    0x73, '1111111110101111':    0x74, '1111111110110000':    0x75, '1111111110110001':    0x76, '1111111110110010':    0x77, '1111111110110011':    0x78, '1111111110110100':    0x79, '1111111110110101':    0x7a, '111111000'       :    0x81, '111111111000000' :    0x82, '1111111110110110':    0x83, '1111111110110111':    0x84, '1111111110111000':    0x85, '1111111110111001':    0x86, '1111111110111010':    0x87, '1111111110111011':    0x88, '1111111110111100':    0x89, '1111111110111101':    0x8a, '111111001'       :    0x91, '1111111110111110':    0x92, '1111111110111111':    0x93, '1111111111000000':    0x94, '1111111111000001':    0x95, '1111111111000010':    0x96, '1111111111000011':    0x97, '1111111111000100':    0x98, '1111111111000101':    0x99, '1111111111000110':    0x9a, '111111010'       :    0xa1, '1111111111000111':    0xa2, '1111111111001000':    0xa3, '1111111111001001':    0xa4, '1111111111001010':    0xa5, '1111111111001011':    0xa6, '1111111111001100':    0xa7, '1111111111001101':    0xa8, '1111111111001110':    0xa9, '1111111111001111':    0xaa, '1111111001'      :    0xb1, '1111111111010000':    0xb2, '1111111111010001':    0xb3, '1111111111010010':    0xb4, '1111111111010011':    0xb5, '1111111111010100':    0xb6, '1111111111010101':    0xb7, '1111111111010110':    0xb8, '1111111111010111':    0xb9, '1111111111011000':    0xba, '1111111010'      :    0xc1, '1111111111011001':    0xc2, '1111111111011010':    0xc3, '1111111111011011':    0xc4, '1111111111011100':    0xc5, '1111111111011101':    0xc6, '1111111111011110':    0xc7, '1111111111011111':    0xc8, '1111111111100000':    0xc9, '1111111111100001':    0xca, '11111111000'     :    0xd1, '1111111111100010':    0xd2, '1111111111100011':    0xd3, '1111111111100100':    0xd4, '1111111111100101':    0xd5, '1111111111100110':    0xd6, '1111111111100111':    0xd7, '1111111111101000':    0xd8, '1111111111101001':    0xd9, '1111111111101010':    0xda, '1111111111101011':    0xe1, '1111111111101100':    0xe2, '1111111111101101':    0xe3, '1111111111101110':    0xe4, '1111111111101111':    0xe5, '1111111111110000':    0xe6, '1111111111110001':    0xe7, '1111111111110010':    0xe8, '1111111111110011':    0xe9, '1111111111110100':    0xea, '11111111001'     :    0xf0, '1111111111110101':    0xf1, '1111111111110110':    0xf2, '1111111111110111':    0xf3, '1111111111111000':    0xf4, '1111111111111001':    0xf5, '1111111111111010':    0xf6, '1111111111111011':    0xf7, '1111111111111100':    0xf8, '1111111111111101':    0xf9, '1111111111111110':    0xfa}
dict_AC1 = {'00'              :  0x00, '01'              :  0x01, '100'             :  0x02, '1010'            :  0x03, '11000'           :  0x04, '11001'           :  0x05, '111000'          :  0x06, '1111000'         :  0x07, '111110100'       :  0x08, '1111110110'      :  0x09, '111111110100'    :  0x0a, '1011'            :  0x11, '111001'          :  0x12, '11110110'        :  0x13, '111110101'       :  0x14, '11111110110'     :  0x15, '111111110101'    :  0x16, '1111111110001000':  0x17, '1111111110001001':  0x18, '1111111110001010':  0x19, '1111111110001011':  0x1a, '11010'           :  0x21, '11110111'        :  0x22, '1111110111'      :  0x23, '111111110110'    :  0x24, '111111111000010' :  0x25, '1111111110001100':  0x26, '1111111110001101':  0x27, '1111111110001110':  0x28, '1111111110001111':  0x29, '1111111110010000':  0x2a, '11011'           :  0x31, '11111000'        :  0x32, '1111111000'      :  0x33, '111111110111'    :  0x34, '1111111110010001':  0x35, '1111111110010010':  0x36, '1111111110010011':  0x37, '1111111110010100':  0x38, '1111111110010101':  0x39, '1111111110010110':  0x3a, '111010'          :  0x41, '111110110'       :  0x42, '1111111110010111':  0x43, '1111111110011000':  0x44, '1111111110011001':  0x45, '1111111110011010':  0x46, '1111111110011011':  0x47, '1111111110011100':  0x48, '1111111110011101':  0x49, '1111111110011110':  0x4a, '111011'          :  0x51, '1111111001'      :  0x52, '1111111110011111':  0x53, '1111111110100000':  0x54, '1111111110100001':  0x55, '1111111110100010':  0x56, '1111111110100011':  0x57, '1111111110100100':  0x58, '1111111110100101':  0x59, '1111111110100110':  0x5a, '1111001'         :  0x61, '11111110111'     :  0x62, '1111111110100111':  0x63, '1111111110101000':  0x64, '1111111110101001':  0x65, '1111111110101010':  0x66, '1111111110101011':  0x67, '1111111110101100':  0x68, '1111111110101101':  0x69, '1111111110101110':  0x6a, '1111010'         :  0x71, '11111111000'     :  0x72, '1111111110101111':  0x73, '1111111110110000':  0x74, '1111111110110001':  0x75, '1111111110110010':  0x76, '1111111110110011':  0x77, '1111111110110100':  0x78, '1111111110110101':  0x79, '1111111110110110':  0x7a, '11111001'        :  0x81, '1111111110110111':  0x82, '1111111110111000':  0x83, '1111111110111001':  0x84, '1111111110111010':  0x85, '1111111110111011':  0x86, '1111111110111100':  0x87, '1111111110111101':  0x88, '1111111110111110':  0x89, '1111111110111111':  0x8a, '111110111'       :  0x91, '1111111111000000':  0x92, '1111111111000001':  0x93, '1111111111000010':  0x94, '1111111111000011':  0x95, '1111111111000100':  0x96, '1111111111000101':  0x97, '1111111111000110':  0x98, '1111111111000111':  0x99, '1111111111001000':  0x9a, '111111000'       :  0xa1, '1111111111001001':  0xa2, '1111111111001010':  0xa3, '1111111111001011':  0xa4, '1111111111001100':  0xa5, '1111111111001101':  0xa6, '1111111111001110':  0xa7, '1111111111001111':  0xa8, '1111111111010000':  0xa9, '1111111111010001':  0xaa, '111111001'       :  0xb1, '1111111111010010':  0xb2, '1111111111010011':  0xb3, '1111111111010100':  0xb4, '1111111111010101':  0xb5, '1111111111010110':  0xb6, '1111111111010111':  0xb7, '1111111111011000':  0xb8, '1111111111011001':  0xb9, '1111111111011010':  0xba, '111111010'       :  0xc1, '1111111111011011':  0xc2, '1111111111011100':  0xc3, '1111111111011101':  0xc4, '1111111111011110':  0xc5, '1111111111011111':  0xc6, '1111111111100000':  0xc7, '1111111111100001':  0xc8, '1111111111100010':  0xc9, '1111111111100011':  0xca, '11111111001'     :  0xd1, '1111111111100100':  0xd2, '1111111111100101':  0xd3, '1111111111100110':  0xd4, '1111111111100111':  0xd5, '1111111111101000':  0xd6, '1111111111101001':  0xd7, '1111111111101010':  0xd8, '1111111111101011':  0xd9, '1111111111101100':  0xda, '11111111100000'  :  0xe1, '1111111111101101':  0xe2, '1111111111101110':  0xe3, '1111111111101111':  0xe4, '1111111111110000':  0xe5, '1111111111110001':  0xe6, '1111111111110010':  0xe7, '1111111111110011':  0xe8, '1111111111110100':  0xe9, '1111111111110101':  0xea, '1111111010'      :  0xf0, '111111111000011' :  0xf1, '1111111111110110':  0xf2, '1111111111110111':  0xf3, '1111111111111000':  0xf4, '1111111111111001':  0xf5, '1111111111111010':  0xf6, '1111111111111011':  0xf7, '1111111111111100':  0xf8, '1111111111111101':  0xf9, '1111111111111110':  0xfa}
dict_DC0 = {'00'       : 0x00, '010'      : 0x01, '011'      : 0x02, '100'      : 0x03, '101'      : 0x04, '110'      : 0x05, '1110'     : 0x06, '11110'    : 0x07, '111110'   : 0x08, '1111110'  : 0x09, '11111110' : 0x0a, '111111110': 0x0b}
dict_DC1 = {'00'          : 0x00, '01'          : 0x01, '10'          : 0x02, '110'         : 0x03, '1110'        : 0x04, '11110'       : 0x05, '111110'      : 0x06, '1111110'     : 0x07, '11111110'    : 0x08, '111111110'   : 0x09, '1111111110'  : 0x0a, '11111111110' : 0x0b}

def zz2block(block: list) -> np.ndarray:
	re = np.empty((8, 8), np.int16)
	# 当前在block的位置
	pos = np.array([0, 0])
	# 定义四个扫描方向
	R = np.array([0, 1])
	LD = np.array([1, -1])
	D = np.array([1, 0])
	RU = np.array([-1, 1])
	for i in range(0, 64):
		# re[i] = block[pos[0], pos[1]]
		re[pos[0], pos[1]] = block[i]
		if(((pos[0] == 0) or (pos[0] == 7)) and (pos[1] % 2 == 0)):
			pos = pos + R
		elif(((pos[1] == 0) or (pos[1] == 7)) and (pos[0] % 2 == 1)):
			pos = pos + D
		elif((pos[0] + pos[1]) % 2 == 0):
			pos = pos + RU
		else:
			pos = pos + LD
	return re

temp = ''
with open('or.txt', 'r') as f:
	for line in f:
		temp += line.replace(' ', '')[:-1]
my = ''
for i in range(len(temp)):
	my += bin(int(temp[i], 16))[2:].zfill(4)
last_block_ydc = 0
last_block_cbdc = 0
last_block_crdc = 0
nowIdx = 0
i = 0
while 1:
	nowBlockY = []
	while i < len(my) - 1:
		try:
			var = dict_DC0[my[nowIdx:i+1]]
			num = int(my[i+1:i+1+var], 2)
			if my[i+1] == '0':
				num = -((1<<var) - 1) + num
			nowBlockY.append(num + last_block_ydc)
			nowIdx = i + 1 + var
			i = nowIdx
			break
		except KeyError:
			i += 1
	last_block_ydc = nowBlockY[-1]
	while i < len(my) - 1:
		try:
			var = dict_AC0[my[nowIdx:i+1]]
			num0 = var >> 4
			num1 = var & 0xf
			nowBlockY.extend([0] * num0)
			if num0 == 15 and num1 == 0:
				nowBlockY.append(0)
			elif num0 == 0 and num1 == 0:
				nowBlockY.extend([0] * (64-len(nowBlockY)))
			else:
				num = int(my[i+1:i+1+num1], 2)
				if(my[i+1] == '1'):
					nowBlockY.append(num)
				else:
					nowBlockY.append(-((1<<num1) - 1) + num)
			nowIdx = i + 1 + num1
			i = nowIdx
			if(len(nowBlockY) == 64):
				break
		except KeyError:
			i += 1

	nowBlockCb = []
	while i < len(my) - 1:
		try:
			var = dict_DC1[my[nowIdx:i+1]]
			num = int(my[i+1:i+1+var], 2)
			if my[i+1] == '0':
				num = -((1<<var) - 1) + num
			nowBlockCb.append(num + last_block_cbdc)
			nowIdx = i + 1 + var
			i = nowIdx
			break
		except KeyError:
			i += 1
	last_block_cbdc = nowBlockCb[-1]
	while i < len(my) - 1:
		try:
			var = dict_AC1[my[nowIdx:i+1]]
			num0 = var >> 4
			num1 = var & 0xf
			nowBlockCb.extend([0] * num0)
			if num0 == 15 and num1 == 0:
				nowBlockCb.append(0)
			elif num0 == 0 and num1 == 0:
				nowBlockCb.extend([0] * (64-len(nowBlockCb)))
			else:
				num = int(my[i+1:i+1+num1], 2)
				if(my[i+1] == '1'):
					nowBlockCb.append(num)
				else:
					nowBlockCb.append(-((1<<num1) - 1) + num)
			nowIdx = i + 1 + num1
			i = nowIdx
			if(len(nowBlockCb) == 64):
				break
		except KeyError:
			i += 1

	nowBlockCr = []
	while i < len(my) - 1:
		try:
			var = dict_DC1[my[nowIdx:i+1]]
			num = int(my[i+1:i+1+var], 2)
			if my[i+1] == '0':
				num = -((1<<var) - 1) + num
			nowBlockCr.append(num + last_block_crdc)
			nowIdx = i + 1 + var
			i = nowIdx
			break
		except KeyError:
			i += 1
	last_block_crdc = nowBlockCr[-1]
	while i < len(my) - 1:
		try:
			var = dict_AC1[my[nowIdx:i+1]]
			num0 = var >> 4
			num1 = var & 0xf
			nowBlockCr.extend([0] * num0)
			if num0 == 15 and num1 == 0:
				nowBlockCr.append(0)
			elif num0 == 0 and num1 == 0:
				nowBlockCr.extend([0] * (64-len(nowBlockCr)))
			else:
				num = int(my[i+1:i+1+num1], 2)
				if(my[i+1] == '1'):
					nowBlockCr.append(num)
				else:
					nowBlockCr.append(-((1<<num1) - 1) + num)
			nowIdx = i + 1 + num1
			i = nowIdx
			if(len(nowBlockCr) == 64):
				break
		except KeyError:
			i += 1
	print(zz2block(nowBlockY))
	print(zz2block(nowBlockCb))
	print(zz2block(nowBlockCr))

# %%
import cv2
img = cv2.imread('1.png')
h, w, d = img.shape
img = img[:, -h:, :]
# print(img.shape)
img = cv2.resize(img, (256, 256), cv2.INTER_CUBIC)
# print(img.shape)
cv2.imwrite('1.png', img)